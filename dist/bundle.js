function t(t={...l},n){return"function"==typeof t?f.call(null,{...l,_context:"server"},t,n):f.bind(null,{...t,_context:"server"})}function n(t={...l},n){return"function"==typeof t?f.call(null,{...l,_context:"client"},t,n):f.bind(null,{...t,_context:"client"})}function e(t={...d},n){return"function"==typeof t?h.call(null,{...d},t,n):h.bind(null,t)}const o=async(t,n)=>await w(t),s=async(t,n)=>await w(t),r=async(t,n)=>await w(t),a=async(t,n)=>await w(t),c=async(t,n)=>await w(t),i=Symbol("RPCExtension"),u=new Map,l={endpoint:"/api/rpc",_context:"server"},d={method:"GET"};function f(t,n,e){const{endpoint:o,_context:s}=t;if(!o)throw new Error("Missing 'endpoint' option in args to route the requests");const r=class extends n{constructor(...t){super(...t)}};e.addInitializer((()=>{const t=new Map;u.set(o+":"+e.name,t);const r=n.prototype;for(const n of Reflect.ownKeys(r)){const e=r[n];if("function"==typeof e){if(r[n]=e.bind(r),!p(e)||e.name.startsWith("#"))continue;if("client"==s){if(!y())continue;r[n]=a(n,r[n])}if("server"==s){if(y())continue;t.set(String(n),r[n]=c(r[n]))}}}}));for(const t of Reflect.ownKeys(n))t in r||(r[t]=n[t]);return r;function a(t,n){return async(...s)=>{const r=new Headers(n[i]?.headers);r.set("X-Servell-Function",e.name+"."+String(t)),r.set("X-Servell-Args",JSON.stringify(s));const a=await fetch(o,{method:n[i]?.method??"GET",body:n[i]?.body,cache:n[i]?.cache,headers:r});await n(...s,a)}}function c(t){return async(...n)=>{const e=t[i]?.content??"json";let o={status:"error",data:void 0};try{const s=await t(...n);switch(e){case"json":o={status:"ok",data:s};break;case"text":o={status:"ok",data:String(s)};break;default:o={status:"ok",data:null}}}catch(t){o={status:"error",data:String(t)}}finally{return o}}}}function h(t,n,e){const{body:o,cache:s,content:r,headers:a,method:c}=t;e.addInitializer((()=>{n[i]={body:o,cache:s,content:r,headers:a,method:c}}))}const w=async(t,n)=>{const e=t.headers.get("X-Servell-Function"),o=t.headers.get("X-Servell-Args");if(!e||!o)throw new Error("Required headers 'X-Servell-Function' or 'X-Servell-Args' missing from the request");const[s,r]=e.split(".");if(!s||!r)throw new Error("The value of the 'X-Servell-Function' header is invalid");const a=JSON.parse(o),c=new URL(t.url).pathname,i=u.get(c+":"+s)?.get(r);if(!i)return Response.json({status:"error"},{status:404});const l=await i(...a),d="ok"==l.status?200:500;return Response.json(l,{status:d})};function y(){return"undefined"!=typeof window&&window.document&&Object.is(globalThis,window)}function p(t){return t instanceof(async()=>{}).constructor}export{n as client,c as deleteHandler,o as getHandler,p as isAsyncFunction,y as isBrowser,e as param,a as patchHandler,s as postHandler,r as putHandler,t as server};
